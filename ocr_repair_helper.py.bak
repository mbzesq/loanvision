# ocr_repair_helper.py

import os
import shutil
from pathlib import Path
from pdf2image import convert_from_path
from PIL import Image
import img2pdf

# Set up paths
PDF_DIR = Path("docs/test_set")
TEMP_IMAGE_DIR = Path("processed_images")
OUTPUT_PDF_DIR = Path("ocr_optimized_pdfs")

# Create necessary directories
TEMP_IMAGE_DIR.mkdir(parents=True, exist_ok=True)
OUTPUT_PDF_DIR.mkdir(parents=True, exist_ok=True)

def optimize_pdf(pdf_path: Path):
    print(f"üîß Optimizing: {pdf_path.name}")

    # Convert PDF to grayscale images
    images = convert_from_path(str(pdf_path), dpi=300)
    image_paths = []

    for idx, img in enumerate(images):
        grayscale = img.convert("L")  # Grayscale
        temp_image_path = TEMP_IMAGE_DIR / f"{pdf_path.stem}_{idx + 1}.png"
        grayscale.save(temp_image_path)
        image_paths.append(temp_image_path)

    # Reassemble optimized PDF
    output_pdf_path = OUTPUT_PDF_DIR / f"{pdf_path.stem}_ocr_fixed.pdf"
    with open(output_pdf_path, "wb") as f:
        f.write(img2pdf.convert([str(p) for p in image_paths]))

    print(f"‚úÖ Saved optimized PDF: {output_pdf_path.name}")

    # Clean up intermediate PNGs
    for path in image_paths:
        path.unlink()

def main():
    for pdf in PDF_DIR.glob("*.pdf"):
        try:
            optimize_pdf(pdf)
        except Exception as e:
            print(f"‚ùå Failed on {pdf.name}: {str(e)}")

if __name__ == "__main__":
    main()